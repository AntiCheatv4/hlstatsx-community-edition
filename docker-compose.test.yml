version: '2.2'
services:
  test-routes:
    image: alpine:latest
    environment:
      URLS: |
        http://web/ 302
        http://web/css/spinner.gif 200
        http://web/hlstatsimg/ajax.gif 200
        http://web/includes/ 401
        http://web/pages/ 401
        http://web/pages/.htaccess 401
        http://web/styles/classic.css 200
        http://web/updater/ 401
        http://web/autocomplete.php 200
        http://web/config.php 401
        http://web/hlstats.php 200
        http://web/index.php 302
        http://web/ingame.php 200
        http://web/show_graph.php 200
        http://web/sig.php 200
        http://web/status.php 200
        http://web/trend_graph.php 200
    networks:
      - default
    stop_signal: SIGKILL
    entrypoint:
      - /bin/sh
    command:
      - -c
      - |
          set -eu

          echo "Waiting for stack to be ready"
          s=0
          while true; do
              nc -vz -w 1 web 80 \
                  && nc -vz -w 1 web 9000 \
                  && nc -vz -w 1 db 3306 \
                  && break || true
              s=$$(( $$s + 1 ))
              if [ "$$s" -eq 600 ]; then
                  exit 1
              fi
              echo "Retrying in 3 seconds"
              sleep 3
          done

          echo "$$URLS" | awk NF | while read -r i j; do
              if wget -q -SO- "$$i" 2>&1 | grep "HTTP/1.1 $$j " > /dev/null; then
                  echo "PASS: $$i"
              else
                  echo "FAIL: $$i"
                  exit 1
              fi
          done

  test-endpoints:
    build:
      dockerfile_inline: |
        FROM alpine:latest
        RUN apk add --no-cache curl
    environment:
      ENDPOINTS: |
        web.example.com 200
        phpmyadmin.example.com 200
    network_mode: host
    depends_on:
      test-routes:
        condition: service_completed_successfully
    stop_signal: SIGKILL
    entrypoint:
      - /bin/sh
    command:
      - -c
      - |
          set -eu

          echo "$$ENDPOINTS" | awk NF | while read -r i j; do
              if curl --head -kL http://$$i --resolve $$i:80:127.0.0.1 --resolve $$i:443:127.0.0.1 2>&1 | grep "^HTTP/2 $$j " > /dev/null; then
                  echo "PASS: $$i"
              else
                  echo "FAIL: $$i"
                  exit 1
              fi
          done

networks:
  default:
